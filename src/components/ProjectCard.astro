---
export interface Props {
  title: string;
  description: string;
  features: string[];
  tags?: string[];
  buttonText?: string;
  buttonHref?: string;
  gradientFrom: string;
  gradientTo: string;
  class?: string;
}

const { 
  title, 
  description, 
  features, 
  tags = [],
  buttonText = "了解更多",
  buttonHref = "#",
  gradientFrom,
  gradientTo,
  class: className = ''
} = Astro.props;
---

<div class={`bg-brand-surface rounded-lg md:rounded-xl shadow-lg overflow-hidden ${className}`}>
  <div class={`bg-gradient-to-r ${gradientFrom} ${gradientTo} p-6 md:p-8 text-white`}>
    <h3 class="text-xl md:text-2xl font-bold mb-3 md:mb-4">{title}</h3>
    <p class="text-sm md:text-base text-brand-light">{description}</p>
  </div>
  
  <div class="p-6 md:p-8">
    <div class="mb-6">
      <h4 class="text-base md:text-lg font-semibold text-brand-primary mb-3">主要特色</h4>
      <ul class="space-y-2 text-sm md:text-base text-brand-secondary">
        {features.map(feature => (
          <li class="flex items-start">
            <span class="w-2 h-2 bg-brand-accent rounded-full mt-2 mr-3 flex-shrink-0"></span>
            {feature}
          </li>
        ))}
      </ul>
    </div>
    
    {tags.length > 0 && (
      <div class="mb-6">
        <div class="flex flex-wrap gap-2">
          {tags.map(tag => (
            <span class="bg-primary-100 text-primary-800 px-2 py-1 md:px-3 md:py-1 rounded-full text-xs md:text-sm">{tag}</span>
          ))}
        </div>
      </div>
    )}
    
    <a href={buttonHref} class="bg-brand-accent hover:bg-primary-700 text-white px-4 py-2 md:px-6 md:py-3 rounded-lg text-sm md:text-base font-semibold transition-colors inline-block w-full md:w-auto text-center">
      {buttonText}
    </a>
  </div>
</div>
